{
  "version": 3,
  "sources": ["../../src/lib/states.ts"],
  "sourcesContent": ["import {ModbusDatatype} from './modbus/modbus_types';\nimport {InverterStatus, MeterStatus, StorageStatus} from './state_enums';\nimport {AdapterInstance} from '@iobroker/adapter-core';\nimport {ModbusDevice} from './modbus/modbus_device';\n\ntype MapperFn = (value: any) => Promise<any>\ntype PostUpdateHookFn = (adapter: AdapterInstance, value: any) => Promise<void>\n\ninterface DataField {\n    interval?: UpdateIntervalID;\n    state: State;\n    register: ModbusRegister;\n    mapper?: MapperFn;\n    postUpdateHook?: PostUpdateHookFn;\n}\n\ninterface StateToUpdate {\n    id: string;\n    value: any;\n    postUpdateHook?: PostUpdateHookFn;\n}\n\ninterface State {\n    id: string;\n    name: string;\n    type: ioBroker.CommonType;\n    role: string;\n    unit?: string;\n    desc?: string;\n}\n\ninterface ModbusRegister {\n    reg: number;\n    type: ModbusDatatype;\n    length: number;\n    gain?: number;\n}\n\nexport enum UpdateIntervalID {\n    HIGH,\n    LOW\n}\n\ninterface UpdateIntervals {\n    intervals: number[];\n}\n\nexport class InverterStates {\n\n    private updateIntervals: UpdateIntervals\n    private readonly dataFields: DataField[];\n    // private changingFields: DataField[];\n\n    constructor(updateIntervals: UpdateIntervals) {\n        this.updateIntervals = updateIntervals\n        this.dataFields = [\n            // initial fields - no repetitive update\n            {\n                state: {id: 'info.model', name: 'Model', type: 'string', role: 'state'},\n                register: {reg: 30000, type: ModbusDatatype.string, length: 15}\n            },\n            {\n                state: {id: 'info.modelID', name: 'Model ID', type: 'number', role: 'state'},\n                register: {reg: 30070, type: ModbusDatatype.uint16, length: 1}\n            },\n            {\n                state: {id: 'info.serialNumber', name: 'Serial number', type: 'string', role: 'state'},\n                register: {reg: 30015, type: ModbusDatatype.string, length: 10}\n            },\n            {\n                state: {id: 'info.ratedPower', name: 'Rated power', type: 'number', unit: 'W', role: 'state'},\n                register: {reg: 30073, type: ModbusDatatype.int32, length: 2}\n            },\n            {\n                state: {id: 'info.numberMPPTrackers', name: 'Number of MPP trackers', type: 'number', unit: '', role: 'state'},\n                register: {reg: 30072, type: ModbusDatatype.uint16, length: 1, gain: 1}\n            },\n\n            // inverter\n            {\n                interval: UpdateIntervalID.HIGH,\n                state: {id: 'activePower', name: 'Active power', type: 'number', unit: 'W', role: 'value.power', desc: 'Power currently used'},\n                register: {reg: 32080, type: ModbusDatatype.int32, length: 2}\n            },\n            {\n                interval: UpdateIntervalID.HIGH,\n                state: {id: 'inputPower', name: 'Input power', type: 'number', unit: 'W', role: 'value.power', desc: 'Power from PV'},\n                register: {reg: 32064, type: ModbusDatatype.int32, length: 2}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'peakActivePowerCurrenDay', name: 'Peak active power of current day', type: 'number', unit: 'W', role: 'value.power.max'},\n                register: {reg: 32078, type: ModbusDatatype.int32, length: 2}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'efficiency', name: 'Efficiency', type: 'number', unit: '%', role: 'value.efficiency'},\n                register: {reg: 32086, type: ModbusDatatype.uint16, length: 1, gain: 100}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'internalTemperature', name: 'Internal temperature', type: 'number', unit: '\u00B0C', role: 'value.temp'},\n                register: {reg: 32087, type: ModbusDatatype.int16, length: 1, gain: 10}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'deviceStaus', name: 'Device status', type: 'string', unit: '', role: 'value.status'},\n                register: {reg: 32089, type: ModbusDatatype.uint16, length: 1},\n                mapper: value => Promise.resolve(InverterStatus[value])\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'accumulatedEnergyYield', name: 'Accumulated energy yield', type: 'number', unit: 'kWh', role: 'value'},\n                register: {reg: 32106, type: ModbusDatatype.uint32, length: 2, gain: 100},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'dailyEnergyYield', name: 'Daily energy yield', type: 'number', unit: 'kWh', role: 'value'},\n                register: {reg: 32114, type: ModbusDatatype.uint32, length: 2, gain: 100}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'PV1Voltage', name: 'PV1 voltage', type: 'number', unit: 'V', role: 'value.voltage'},\n                register: {reg: 32016, type: ModbusDatatype.int16, length: 1, gain: 10}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'PV1Current', name: 'PV1 current', type: 'number', unit: 'A', role: 'value.current'},\n                register: {reg: 32017, type: ModbusDatatype.int16, length: 1, gain: 100}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'PV2Voltage', name: 'PV2 voltage', type: 'number', unit: 'V', role: 'value.voltage'},\n                register: {reg: 32018, type: ModbusDatatype.int16, length: 1, gain: 10}\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'PV2Current', name: 'PV2 current', type: 'number', unit: 'A', role: 'value.current'},\n                register: {reg: 32019, type: ModbusDatatype.int16, length: 1, gain: 100}\n            },\n\n            // storage\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'storage.runningState', name: 'Running state', type: 'string', role: 'value'},\n                register: {reg: 37762, type: ModbusDatatype.uint16, length: 1},\n                mapper: value => Promise.resolve(StorageStatus[value])\n            },\n            {\n                interval: UpdateIntervalID.HIGH,\n                state: {id: 'storage.stateOfCapacity', name: 'State of capacity', type: 'number', unit: '%', role: 'value.capacity', desc: 'SOC'},\n                register: {reg: 37760, type: ModbusDatatype.uint16, length: 1, gain: 10}\n            },\n            {\n                interval: UpdateIntervalID.HIGH,\n                state: {id: 'storage.chargeDischargePower', name: 'Charge/Discharge power', desc: '(>0 charging, <0 discharging)', type: 'number', unit: 'W', role: 'value.power'},\n                register: {reg: 37765, type: ModbusDatatype.int32, length: 2},\n                postUpdateHook: async (adapter, value) => {\n                    await adapter.setStateAsync('storage.chargePower', {val: Math.max(0, value), ack: true});\n                    await adapter.setStateAsync('storage.dischargePower', {val: Math.abs(Math.min(0, value)), ack: true});\n                    return Promise.resolve()\n                }\n            },\n            // <TODOO date=\"31.08.2023\" author=\"Stephan Bechter\">\n            // TODO: add Charge discharge capacity per day\n            // </TODOO>\n\n            // grid (meter)\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.meterStatus', name: 'Meter status', type: 'string', role: 'value.status'},\n                register: {reg: 37100, type: ModbusDatatype.uint16, length: 1},\n                mapper: value => Promise.resolve(MeterStatus[value])\n            },\n            {\n                interval: UpdateIntervalID.HIGH,\n                state: {id: 'grid.activePower', name: 'Active power', type: 'number', role: 'value.power', unit: 'W', desc: '(>0 feed-in to the power grid, <0: supply from the power grid)'},\n                register: {reg: 37113, type: ModbusDatatype.int32, length: 2},\n                postUpdateHook: async (adapter, value) => {\n                    await adapter.setStateAsync('grid.feedIn', {val: Math.max(0, value), ack: true});\n                    await adapter.setStateAsync('grid.supplyFrom', {val: Math.abs(Math.min(0, value)), ack: true});\n                    return Promise.resolve()\n                }\n\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.reactivePower', name: 'Reactive power', type: 'number', role: 'value.power', unit: 'W'},\n                register: {reg: 37115, type: ModbusDatatype.int32, length: 2},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.powerFactor', name: 'Power factor', type: 'number', role: 'value.power.factor', unit: ''},\n                register: {reg: 37117, type: ModbusDatatype.int16, length: 1, gain: 1000},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.gridFrequency', name: 'Grid frequency', type: 'number', role: 'value.frequency', unit: 'Hz'},\n                register: {reg: 37118, type: ModbusDatatype.int16, length: 1, gain: 100},\n            },\n\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.phase1Voltage', name: 'Phase 1 voltage', type: 'number', role: 'value.voltage', unit: 'V', desc: 'also L1, or R voltage'},\n                register: {reg: 37101, type: ModbusDatatype.int32, length: 2, gain: 10},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.phase2Voltage', name: 'Phase 2 voltage', type: 'number', role: 'value.voltage', unit: 'V', desc: 'also L2, or S voltage'},\n                register: {reg: 37103, type: ModbusDatatype.int32, length: 2, gain: 10},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.phase3Voltage', name: 'Phase 3 voltage', type: 'number', role: 'value.voltage', unit: 'V', desc: 'also L3, or T voltage'},\n                register: {reg: 37105, type: ModbusDatatype.int32, length: 2, gain: 10},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.phase1Current', name: 'Phase 1 current', type: 'number', role: 'value.current', unit: 'A'},\n                register: {reg: 37107, type: ModbusDatatype.int32, length: 2, gain: 100},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.phase2Current', name: 'Phase 2 current', type: 'number', role: 'value.current', unit: 'A'},\n                register: {reg: 37109, type: ModbusDatatype.int32, length: 2, gain: 100},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.phase3Current', name: 'Phase 3 current', type: 'number', role: 'value.current', unit: 'A'},\n                register: {reg: 37111, type: ModbusDatatype.int32, length: 2, gain: 100},\n            },\n\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.positiveActivePower', name: 'Positive active power', type: 'number', role: 'value.power', unit: 'kWh', desc: 'Electricity fed by the inverter to the power grid.'},\n                register: {reg: 37119, type: ModbusDatatype.int32, length: 2, gain: 100},\n            },\n            {\n                interval: UpdateIntervalID.LOW,\n                state: {id: 'grid.reverseActivePower', name: 'Reverse active power', type: 'number', role: 'value.power', unit: 'kWh', desc: 'Power supplied from the power grid.'},\n                register: {reg: 37121, type: ModbusDatatype.int32, length: 2, gain: 100},\n            },\n        ];\n    }\n\n    public async createStates(adapter: AdapterInstance): Promise<void> {\n        for (const field of this.dataFields) {\n            const state = field.state\n            await adapter.setObjectAsync(state.id, {\n                type: 'state',\n                common: {\n                    name: state.name,\n                    type: state.type,\n                    role: state.role,\n                    unit: state.unit,\n                    desc: state.desc,\n                    read: true,\n                    write: false\n                },\n                native: {},\n            });\n        }\n    }\n\n\n    public async updateStates(adapter: AdapterInstance, device: ModbusDevice, interval?: UpdateIntervalID): Promise<number> {\n        const toUpdate: StateToUpdate[] = [];\n        for (const field of this.dataFields) {\n            if (field.interval != interval) {\n                continue;\n            }\n            try {\n                let value = await device.readModbusHR(field.register.reg, field.register.type, field.register.length);\n\n                if (field.register.gain) {\n                    value /= field.register.gain;\n                }\n                if (field.mapper) {\n                    value = await field.mapper(value);\n                }\n                toUpdate.push({id: field.state.id, value: value, postUpdateHook: field.postUpdateHook});\n            } catch (e) {\n                adapter.log.warn(`Error while reading from ${device.getIpAddress()}: [${field.register.reg}|${field.register.length}] '' with : ${e}`);\n                break;\n            }\n        }\n\n        for (const stateToUpdate of toUpdate) {\n            if (stateToUpdate.value !== null) {\n                await adapter.setStateAsync(stateToUpdate.id, {val: stateToUpdate.value, ack: true});\n                if (stateToUpdate.postUpdateHook) {\n                    await stateToUpdate.postUpdateHook(adapter, stateToUpdate.value);\n                }\n                adapter.log.silly(`Synced value ${stateToUpdate.id}, val=[${stateToUpdate.value}]`);\n            }\n        }\n        return Promise.resolve(toUpdate.length);\n    }\n}\n"],
  "mappings": "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",
  "names": ["UpdateIntervalID"]
}
